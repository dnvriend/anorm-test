db {
  // This is the name of the DataSource class provided by the JDBC driver.
  // Consult the documentation for your specific JDBC driver to get this class name.
  // Note XA data sources are not supported. XA requires a real transaction manager like bitronix.
  // Note that you do not need this property if you are using 'jdbcUrl' for "old-school"
  // DriverManager-based JDBC driver configuration. Default: none
  dataSourceClassName = "org.postgresql.ds.PGSimpleDataSource"

  // This property directs HikariCP to use "DriverManager-based" configuration. We feel that DataSource-based
  // configuration (above) is superior for a variety of reasons, but for many deployments there is little significant
  // difference. When using this property with "old" drivers, you may also need to set the driverClassName
  // property, but try it first without. Note that if this property is used, you may still use DataSource properties
  // to configure your driver and is in fact recommended over driver parameters specified in the URL itself. Default: none
  //jdbcUrl=""

  // This property sets the default authentication username used when obtaining Connections from the underlying driver.
  // Note that for DataSources this works in a very deterministic fashion by calling DataSource.getConnection(*username*, password)
  // on the underlying DataSource. However, for Driver-based configurations, every driver is different. In the case of Driver-based,
  // HikariCP will use this username property to set a user property in the Properties passed to the driver's
  // DriverManager.getConnection(jdbcUrl, props) call. If this is not what you need, skip this method entirely and call
  // addDataSourceProperty("username", ...), for example. Default: none
  dataSource.user = "docker"

  // This property sets the default authentication password used when obtaining Connections from the underlying driver.
  // Note that for DataSources this works in a very deterministic fashion by calling DataSource.getConnection(username, *password*)
  // on the underlying DataSource. However, for Driver-based configurations, every driver is different.
  // In the case of Driver-based, HikariCP will use this password property to set a password property in the Properties passed
  // to the driver's DriverManager.getConnection(jdbcUrl, props) call. If this is not what you need, skip this method entirely
  // and call addDataSourceProperty("pass", ...), for example. Default: none
  dataSource.password = "docker"
  dataSource.databaseName = "docker"
  dataSource.portNumber = 5432
  dataSource.serverName = "localhost"

  // This property controls the default auto-commit behavior of connections returned from the pool.
  // It is a boolean value. Default: true
  autoCommit = true

  // This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections.
  // Basically this value will determine the maximum number of actual connections to the database backend. A reasonable
  // value for this is best determined by your execution environment. When the pool reaches this size, and no idle connections
  // are available, calls to getConnection() will block for up to connectionTimeout milliseconds before timing out.
  // Please read about pool sizing. Default: 10
  maximumPoolSize = 2

  // This property controls the minimum number of idle connections that HikariCP tries to maintain in the pool.
  // If the idle connections dip below this value and total connections in the pool are less than maximumPoolSize,
  // HikariCP will make a best effort to add additional connections quickly and efficiently. However, for maximum
  // performance and responsiveness to spike demands, we recommend not setting this value and instead allowing HikariCP
  // to act as a fixed size connection pool. Default: same as maximumPoolSize
  minimumIdle = 2

  // This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection
  // from the pool. If this time is exceeded without a connection becoming available, a SQLException will be thrown.
  // Lowest acceptable connection timeout is 250 ms. Default: 30000 (30 seconds)
  connectionTimeout = 30000

  // This property controls the maximum amount of time that a connection is allowed to sit idle in the pool.
  // This setting only applies when minimumIdle is defined to be less than maximumPoolSize. Whether a connection
  // is retired as idle or not is subject to a maximum variation of +30 seconds, and average variation of +15 seconds.
  // A connection will never be retired as idle before this timeout. Once the pool reaches minimumIdle connections,
  // connections will no longer be retired, even if idle. A value of 0 means that idle connections are never removed
  // from the pool. The minimum allowed value is 10000ms (10 seconds). Default: 600000 (10 minutes)
  idleTimeout = 600000

  // This property controls the maximum lifetime of a connection in the pool. An in-use connection will never be retired,
  // only when it is closed will it then be removed. On a connection-by-connection basis, minor negative attenuation is applied
  // to avoid mass-extinction in the pool. We strongly recommend setting this value, and it should be at least 30 seconds less
  // than any database or infrastructure imposed connection time limit. A value of 0 indicates no maximum lifetime (infinite lifetime),
  // subject of course to the idleTimeout setting. Default: 1800000 (30 minutes)
  maxLifetime = 1800000

  // If your driver supports JDBC4 we strongly recommend not setting this property. This is for "legacy" drivers that do not support
  // the JDBC4 Connection.isValid() API. This is the query that will be executed just before a connection is given to you from the pool
  // to validate that the connection to the database is still alive. Again, try running the pool without this property, HikariCP will
  // log an error if your driver is not JDBC4 compliant to let you know. Default: none
  connectionTestQuery = "SELECT 1"

  // This property controls whether Connections obtained from the pool are in read-only mode by default. Note some databases do
  // not support the concept of read-only mode, while others provide query optimizations when the Connection is set to read-only.
  // Whether you need this property or not will depend largely on your application and database. Default: false
  readOnly = false

  // This property controls whether or not JMX Management Beans ("MBeans") are registered or not. Default: false
  registerMbeans = false


  // This property controls the default transaction isolation level of connections returned from the pool.
  // If this property is not specified, the default transaction isolation level defined by the JDBC driver is used.
  // Only use this property if you have specific isolation requirements that are common for all queries. The value of
  // this property is the constant name from the Connection class such as TRANSACTION_READ_COMMITTED,
  // TRANSACTION_REPEATABLE_READ, etc. Default: driver default
  //transactionIsolation = "TRANSACTION_READ_COMMITTED"
}
